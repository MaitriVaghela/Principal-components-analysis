from sklearn import preprocessing
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA


dfStates = ([
"Abilene,TX",
"Akron,OH",
"Albany,GA",
"Albany-Schenectady-Troy,NY",
"Albuquerque,NM",
"Alexandria,LA",
"Allentown,Bethlehem,PA-NJ",
"Alton,Granite-City,IL",
"Altoona,PA",
"Amarillo,TX",
"Anaheim-Santa-Ana,CA",
"Anchorage,AK",
"Anderson,IN",
"Anderson,SC",
"Ann-Arbor,MI",
"Anniston,AL",
"Appleton-Oshkosh-Neenah,WI",
"Asheville,NC",
"Athens,GA",
"Atlanta,GA",
"Atlantic-City,NJ",
"Augusta,GA-SC",
"Aurora-Elgin,IL",
"Austin,TX",
"Bakersfield,CA",
"Baltimore,MD",
"Bangor,ME",
"Baton-Rouge,LA",
"Battle-Creek,MI",
"Beaumont-Port-Arthur,TX",
"Beaver-County,PA",
"Bellingham,WA",
"Benton-Harbor,MI",
"Bergen-Passaic,NJ",
"Billings,MT",
"Biloxi-Gulfport,MS",
"Binghampton,NY",
"Birmingham,AL",
"Bismarck,ND",
"Bloomington,IN",
"Bloomington-Normal,IL",
"Boise-City,ID",
"Boston,MA",
"Boulder-Longmont,CO",
"Bradenton,FL",
"Brazoria,TX",
"Bremerton,WA",
"Bridgeport-Milford,CT",
"Bristol,CT",
"Brockton,MA",
"Brownsville-Harlington,TX",
"Bryan-College-Station,TX",
"Buffalo,NY",
"Burlington,NC",
"Burlington,VT",
"Canton,OH",
"Casper,WY",
"Cedar-Rapids,IA",
"Champaign-Urbana-Rantoul,IL",
"Charleston,SC",
"Charleston,WV",
"Charlotte-Gastonia-Rock-Hill,NC-SC",
"Charlottesville,VA",
"Chattanooga,TN-GA",
"Chicago,IL",
"Chico,CA",
"Cincinnati,OH-KY-IN",
"Clarksville-Hopkinsville,TN-KY",
"Cleveland,OH",
"Colorado-Springs,CO",
"Columbia,MO",
"Columbia,SC",
"Columbus,GA-AL",
"Columbus,OH",
"Corpus-Christi,TX",
"Cumberland,MD-WV",
"Dallas,TX",
"Danbury,CT",
"Danville,VA",
"Davenport-Rock-Island-Moline,IA-IL",
"Dayton-Springfield,OH",
"Daytona-Beach,FL",
"Decatur,IL",
"Denver,CO",
"Des-Moines,IA",
"Detroit,MI",
"Dothgan,AL",
"Dubuque,IA",
"Duluth,MN-WI",
"East-St.-Louis-Belleville,IL",
"Eau-Claire,WI",
"El-Paso,TX",
"Elkhart-Goshen,IN",
"Elmira,NY",
"Enid,OK",
"Erie,PA",
"Eugene-Springfield,OR",
"Evansville,IN-KY",
"Fall-River,MA-RI",
"Fargo-Moorhead,ND-MN",
"Fayetteville,NC",
"Fayettteville-Sprindale,AR",
"Fitchburg-Leominster,MA",
"Flint,MI",
"Florence,AL",
"Florence,SC",
"Fort-Collins-Lover=land,CO",
"Fort-Lauderdale-Hollywood-Pompano-Beach,FL",
"Fort-Myers,FL",
"Fort-Pierce,FL",
"Fort-Smith,AR-OK",
"Fort-Walton-Beach,FL",
"Fort-Wayne,IN",
"Forth-Arlington,TX",
"Fresno,CA",
"Gadsden,AL",
"Gainesville,FL",
"Galveston-Texas-City,TX",
"Gary-Hammond,IN",
"Glens-Falls,NY",
"Grand-Forks,ND",
"Grand-Rapids,MI",
"Great-Falls,MT",
"Greeley,CO",
"Green-Bay,WI",
"Greensboro-Winston-Salem-High-Point,NC",
"Greenville-Spartanburg,SC",
"Hagerstown,MD",
"Hamilton-Middletown,OH",
"Harrisburg-Lebanon-Carlisle,PA",
"Hartford,CT",
"Hickory,NC",
"Honolulu,HI",
"Houma-Thibodaux,LA",
"Houston,TX",
"Huntington-Ashland,WV-KY-OH",
"Huntsville,AL",
"Indianapolis,IN",
"Iowa-City,IA",
"Jackson,MI",
"Jackson,MS",
"Jacksonville,FL",
"Jacksonville,NC",
"Janesville-Beloit,WI",
"Jersey-City,NJ",
"Johnson-City-Kingsport-Bristol,TN-VA",
"Johnstown,PA",
"Joliet,IL",
"Joplin,MO",
"Kalamazoo,MI",
"Kankakee,IL",
"Kansas-City,KS",
"Kansas-City,MO",
"Kenosha,WI",
"Kileen-Temple,TX",
"Knoxville,TN",
"Kokomo,IN",
"La-Crosse,WI",
"Lafayette,IN",
"Lafayette,LA",
"Lake-Charles,LA",
"Lake-County,IL",
"Lakeland-Winter-Haven,FL",
"Lancaster,PA",
"Lansing-East-Lansing,MI",
"Laredo,TX",
"Las-Cruces,NM",
"Las-Vegas,NV",
"Lawrence,KS",
"Lawrence-Haverhill,MA-NH",
"Lawton.OK",
"Lewiston-Auburn,ME",
"Lexington-Fayette,KY",
"Lima,OH",
"Lincoln,NE",
"Little-Rock,North-Little-Rock,AR",
"Longview-Marshall,TX",
"Lorain-Elyria,OH",
"Los-Angeles,Long-Beach,CA",
"Louisville,KY-IN",
"Lowell,MA-NH",
"Lubbock,TX",
"Lynchburg,VA",
"Macon,Warner-Robbins,GA",
"Madison,WI",
"Manchester,NH",
"Mansfield,OH",
"McAllen-Edinburg-Mission,TX",
"Medford,OR",
"Melbourne-Titusville-Palm-Bay,FL",
"Memphis,TN-AR-MS",
"Miami-Hialeah,FL",
"Middlesex-Somerset,Hunterdon,NJ",
"Middletown,CT",
"Midland,TX",
"Milwaukee,WI",
"Minneapolis-St.-Paul,MN-WI",
"Mobile,AL",
"Modesto,CA",
"Monmouth-Ocean,NJ",
"Monroe,LA",
"Montgomery,AL",
"Muncie,IN",
"Muskegon,MI",
"Nashua,NH",
"Nashville,TN",
"Nassua-Suffolk,NY",
"New-Bedsford,MA",
"New-Britain,CT",
"New-Haven-Meriden,CT",
"New-London-Norwich,CT-RI",
"New-Orleans,LA",
"New-York,NY",
"Newark,NJ",
"Niagara-Falls,NY",
"Norfolk-Virginia-Beach-Newport-News,VA",
"Norwalk,CT",
"Oakland,CA",
"Ocala,FL",
"Odessa,TX",
"Oklahoma-City,OK",
"Olympia,WA",
"Omaha,NE-IA",
"Orange-County,NY",
"Orlando,FL",
"Owensboro,KY",
"Oxnard-Ventura,CA",
"Panama-City,FL",
"Parkerburg-Marietta,WV-OH",
"Pascagoula,MS",
"Pawtucket-Woonsocket-Attleboro,RI-MA",
"Pensacola,FL",
"Peoria,IL",
"Philadelphia,PA-NJ",
"Phoenix,AZ",
"Pine-Bluff,AR",
"Pittsburgh,PA",
"Pittsfield,MA",
"Portland,ME",
"Portland,OR",
"Portsmouth-Dover-Rochester,NH-ME",
"Poughkeepsie,NY",
"Providence,RI",
"Provo-Orem,UT",
"Pueblo,CO",
"Racine,WI",
"Raleigh-Durham,NC",
"Reading,PA",
"Redding,CA",
"Reno,NV",
"Richland-Kinnewick-Pasco,WA",
"Richmond-Petersburg,VA",
"Riverside-San-Bernardino,CA",
"Roanoke,VA",
"Rochester,MN",
"Rochester,NY",
"Rockford,IL",
"Sacramento,CA",
"Saginaw-Bay-City-Midland,MI",
"St.-Cloud,MN",
"St.-Joseph,MO",
"St.-Louis,MO-IL",
"Salem,OR",
"Salem-Glouster,MA",
"Salinas-Seaside-Monterey,CA",
"Salt-Lake-City-Ogden,UT",
"San-Angelo,TX",
"San-Antonio,TX",
"San-Diego,CA",
"San-Francisco,CA",
"San-Jose,CA",
"Santa-Barbara-Santa-Maria-Lompoc,CA",
"Santa-Cruz,CA",
"Santa-Rosa-Petaluma,CA",
"Sarasota,FL",
"Savannah,GA",
"Scranton-Wilkes-Barre,PA",
"Seattle,WA",
"Sharon,PA",
"Sheboygan,WI",
"Sherman-Denison,TX",
"Shreveport,LA",
"Sioux-City,IA-NE",
"Sioux-Falls,SD",
"South-Bend-Mishawaka,IN",
"Spokane,WA",
"Springfield,IL",
"Springfield,MA",
"Springfield,MO",
"Stamford,CT",
"State-College,PA",
"Steubenville-Weirton,OH-WV",
"Stockton,CA",
"Syracuse,NY",
"Tacoma,WA",
"Tallahassee,FL",
"Tampa-St.-Petersburg-Clearwater,FL",
"Terre-Haute,IN",
"Texarkana,TX-Texarkana,AR",
"Toledo,OH",
"Topeka,KS",
"Trenton,NJ",
"Tuscon,AZ",
"Tulsa,OK",
"Tuscaloosa,AL",
"Tyler,TX",
"Utica-Rome,NY",
"Vallejo-Fairfield-Napa,CA",
"Vancouver,WA",
"Victoria,TX",
"Vineland-Millville-Bridgeton,NJ",
"Visalia-Tulare-Porterville,CA",
"Waco,TX",
"Washington,DC-MD-VA",
"Materbury,CT",
"Waterloo-Cedar-Falls,IA",
"Wausau,WI",
"West-Palm-Beach-Boca-Raton-Delray-Beach,FL",
"Wheeling,WV-OH",
"WichitaKS",
"Wichita-Falls,TX",
"Williamsport,PA",
"Wilmington,DE-NJ-MD",
"Wilmington,NC",
"Worcester,MA",
"Yakima,WA",
"York,PA",
"Youngstown-Warren,OH",
"Yuba-City,CA",
])

#Reading the data
data = open("**\places_rated_new.data", "r")
X = []
city_names = []
firstEntry=True
features = []

# data stored into matrix form
for entry in data:
    if firstEntry:
        values = entry.split(',')
        for i in range(9):
            features.append(values[i + 1])
        firstEntry = False
        continue
    split_string = entry.split('"')
    values = split_string[2].split(',')
    list = []

    city_info = split_string[1].split(',')
    city_name = ""
    for part_of_name in city_info[0].split('-'):
        city_name +=part_of_name[:3]
    city_names.append(city_name+","+city_info[-1])
    for i in range(9):
        list.append(float(values[i+1]))
    X.append(list)

# Normalizing matrix X for each feature such that mean = 0 and S.D. = 1
normalized_X = preprocessing.scale(X)

#PCA works
pca = PCA(n_components=9)
print(pca.fit(normalized_X))
Z = pca.fit_transform(normalized_X)
Y = pca.components_
print("Explained variance ratios")
expVarRatio = pca.explained_variance_ratio_
print(expVarRatio)
print("loading vectors")
loadVectors = pca.components_
print(loadVectors)

#Explained variance ratio has been plotted as a function of number of principal components
plt.plot(expVarRatio.cumsum(),'--o')
plt.show()

#The loading vectors has been listed for the first 3 principal components and has been interpreted.
#pca = PCA(n_components=3)
#print(pca.fit(normalized_X))
#Z = pca.fit_transform(normalized_X)
#Y = pca.components_
#print(Y)

#The original data has been transformed into the principal component space. 
#The transformed data has been plotted in PCA1-PCA2, PCA1-PCA3 and PCA2-PCA3space, i.e. a biplot .  
#The attribute axes has been plotted on the plot 
# for PCA0 and PCA1
xvector = Y[0] 
yvector = Y[1]

xs = Z[:,0]
ys = Z[:,1]

print("xs")
print(xs)
print("ys")
print(ys)

attributes=["City","Climate","HousingCost","HlthCare","Crime","Transp","Educ","Arts","Recreat","Econ"]


for i in range(len(xs)):
    plt.plot(xs[i], ys[i], 'bo')
    plt.text(xs[i], ys[i], dfStates[i], color='blue')

for i in range(len(Y)):
    plt.arrow(0, 0, xvector[i], yvector[i],
              color='red')
    plt.text(xvector[i], yvector[i],
             attributes[i], color='red')


plt.show()

 # for PCA1 and PCA2
xvector = Y[1]
yvector = Y[2]

xs = Z[:,1]
ys = Z[:,2]

for i in range(len(xs)):
    plt.plot(xs[i], ys[i], 'bo')
    plt.text(xs[i], ys[i], dfStates[i], color='blue')

for i in range(len(Y)):
    plt.arrow(0, 0, xvector[i], yvector[i],
              color='red')
    plt.text(xvector[i], yvector[i],
             attributes[i], color='red')
    
plt.show()

# for PCA0 and PCA2
xvector = Y[0]
yvector = Y[2]

xs = Z[:,0]
ys = Z[:,2]

for i in range(len(xs)):
    plt.plot(xs[i], ys[i], 'bo')
    plt.text(xs[i], ys[i], dfStates[i], color='blue')

for i in range(len(Y)):
    plt.arrow(0, 0, xvector[i], yvector[i],
              color='red')
    plt.text(xvector[i], yvector[i],
             attributes[i], color='red')
    
plt.show()
